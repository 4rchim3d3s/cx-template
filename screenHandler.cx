/***************************************
 * Author:
 * Date:
 * Version:
***************************************/
package screenHandler

/***************************************
 * Import CX modules.
***************************************/

import "gl"
import "os"

/***************************************
 * Import custom modules.
***************************************/
import "main"
import "inputHandler"
import "buttonHandler"
import "textboxHandler"
import "switchHandler"
import "sliderHandler"

/***************************************
 * Declaration struct
***************************************/
type Slider struct { // FIXME --> delete when bug #385 fixed
	slidertype str
	id str
	value i32
	value_max i32
	slider_x f32
	slider_y f32
	slider_width i32
	slider_height i32
	frame_x f32
	frame_y f32
	frame_width i32
	frame_height i32
	active bool
	clicked bool
	slider_texture_active i32
	slider_texture_inactive i32
	sliderframe_texture i32
}					 // <--

type Switch struct { // FIXME --> delete when bug #385 fixed
	switchtype str
	id str
	checked bool
	x f32
	y f32
	width i32
	height i32
	active bool
	active_texture i32
	checked_texture i32
	unchecked_texture i32
}					  // <--

type Textbox struct { // FIXME --> delete when bug #385 fixed
	id str
	x f32
	y f32
	text str
	font str
	color str
}					 // <--

type Button struct { // FIXME --> delete when bug #385 fixed
	name str
	x f32
	y f32
	width i32
	height i32
	active bool
	active_texture i32
	inactive_texture i32
}					 // <-- 

type Screen struct {
	name str
	width i32
	height i32
	has_background bool
	background i32
	button_count i32      				// FIXME remove once len(array<struct>) is implemented
	//buttons []buttonHandler.Button 	//-> FIX when slice working
	buttons [20]Button					// see above (delete this line then)
	//textboxes []textboxHandler.Textbox//-> FIX when slice working
	textbox_count i32     				// FIXME remove once len(array<struct>) is implemented
	textboxes [20]Textbox 				// FIXME remove limit once slices are working
	//switches []switchHandler.Switch	//-> Fix when slice working
	switches_count i32					// FIXME remove once len(array<struct>) is implemented
	switches [20]Switch					// FIXME remove limit once slices are working
	//sliders []sliderHandler.Slider	//-> Fix when slice working
	sliders_count i32					// FIXME remove once len(array<struct>) is implemented
	sliders [20]Slider					// FIXME remove limit once slices are working
  }

/***************************************
 * Variables
***************************************/

//--> make the screen size the same as the window size
var SCREEN_WIDTH i32 = main.WINDOW_WIDTH	//Screen-Width pixles
var SCREEN_HEIGHT i32 = main.WINDOW_HEIGHT	//Screen-Height pixles

//--> Here we declare all our variables. For each screen we will have, we make a variable
var SCREEN_MAIN str = "SCREEN_MAIN"
var SCREEN_ACCOUNT str = "SCREEN_ACCOUNT"
var SCREEN_GAME str = "SCREEN_GAME"
var SCREEN_SETTINGS str = "SCREEN_SETTINGS"

//--> This is the variable of the current screen. We will change everything depending the actual screen by using this variabl
var current_screen Screen

/***************************************
 * Functions
***************************************/

/* Function     : newScreen
   Input        : Identifies the name of screen (_name str)
                : Width in pixels (_width i32)
                : Height in pixels (_height i32)
   Output       : A screen (Screen)
   Description  : Constructor for the Screen struct.
*/
func newScreen(_name str, _width i32, _height i32) (screen Screen) {
	var _has_background bool
	var _background i32
	_has_background, _background = loadScreenBackground(_name) // FIXME implement this
	
	screen := Screen{
	  name: _name,
	  width: _width,
	  height: _height,
	  has_background: _has_background,
	  background: _background,
	  button_count: 0,
	  textbox_count: 0,
	  switches_count: 0,
	  sliders_count: 0}
}

/*************************************
 * Screens
**************************************/

/* Function     : newScreen
   Input        : Identifies the screen to set (screen str)
   Description  : Function to change the screen and add all objects like buttons to the new screen 
				: e.g.: When we want main screen we pass the variable SCREEN_MAIN
*/
func setScreen(screen str) {
	var new_screen Screen 		// screen-variable where we store our new screen for the setup
	str.print(screen)			// print out what screen we want to set now

	if str.eq(screen, SCREEN_MAIN) {
		new_screen = newScreen(screen, SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = addButtonToScreen(buttonHandler.newButton("PLAY", 0.0, 0.0, 360, 130, false), new_screen)
		new_screen = addButtonToScreen(buttonHandler.newButton("SETTINGS", 0.0, -0.3, 360, 130, false), new_screen)
		new_screen = addButtonToScreen(buttonHandler.newButton("EXIT", 0.0, -0.6, 360, 130, false), new_screen)
		new_screen = addTextboxToScreen(textboxHandler.newTextbox("VERSION", 0.9 , 0.9, main.PROGRAM_VERSION, textboxHandler.TEXTBOX_FONT_SETTING,"black"), new_screen)
		inputHandler.init(main.WINDOW_MAIN, screen) //initialize the input-callbacks for this screen
	}

	if str.eq(screen, SCREEN_GAME) {
		new_screen = newScreen(screen, SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = addButtonToScreen(buttonHandler.newButton("BACK", 0.0, -0.8, 270, 100, false), new_screen)
		inputHandler.init(main.WINDOW_MAIN, screen) //initialize the input-callbacks for this screen
	}

	if str.eq(screen, SCREEN_SETTINGS) {
		new_screen = newScreen(screen, SCREEN_WIDTH, SCREEN_HEIGHT)
		new_screen = addButtonToScreen(buttonHandler.newButton("BACK", 0.0, -0.8, 270, 100, false), new_screen)
		new_screen = addSwitchToScreen(switchHandler.newSwitch("TESTSWITCH", "CROSS", 0.0, 0.0, 40, 40, false, false), new_screen)
		new_screen = addSwitchToScreen(switchHandler.newSwitch("TESTSWITCH2", "CROSS", -0.1, -0.1, 20, 60, false, false), new_screen)
		new_screen = addSliderToScreen(sliderHandler.newSlider("TESTSLIDER", "CROSS", 50, 100, 0.2, 0.2, 200, 40), new_screen)
		new_screen = addTextboxToScreen(textboxHandler.newTextbox("TESTSLIDER", 0.35 , 0.25, i32.str(new_screen.sliders[0].value), textboxHandler.TEXTBOX_FONT_SETTING,"black"), new_screen)
		new_screen = addSliderToScreen(sliderHandler.newSlider("TESTSLIDER2", "CROSS", 20, 1000, 0.3, 0.3, 400, 40), new_screen)
		new_screen = addTextboxToScreen(textboxHandler.newTextbox("TESTSLIDER2", 0.55 , 0.35, i32.str(new_screen.sliders[0].value), textboxHandler.TEXTBOX_FONT_SETTING,"black"), new_screen)
		inputHandler.init(main.WINDOW_MAIN, screen) //initialize the input-callbacks for this screen
	}
	current_screen = new_screen
}

/* Function     : loadScreenBackground
   Input        : Identifier of the screen (screen_name str)
   Output       : a boolean to check if texture is loaded(has_background bool)
				: the background-texture (texture i32)
   Description  : loads the background texture for the screen and puts it out
*/
func loadScreenBackground(screen_name str) (has_background bool, texture i32) {
	var wd str
	wd = os.GetWorkingDirectory()
		
	has_background = true
	texture = gl.NewTexture(sprintf("%s%s%s%s", wd,"textures/backgrounds/", screen_name,"-background.jpg"))
}

/*************************************
 * Button-Functions
**************************************/

/* Function     : addButtonToScreen
   Input        : The Button to add (button buttonHandler.Button)
                : The Screen where to add the button (screen Screen)
   Output       : The Screen with the added button (screen Screen)
   Description  : Adds a Button to the given Screen
*/
func addButtonToScreen(button buttonHandler.Button, screen Screen) (screen Screen) {
	//screen.buttons = append(screen.buttons, i32.add(screen.button_count , 1)) // FIXME -> use slices when work
	screen.buttons[screen.button_count] = button								// FIXME -> button_count to len(slice)
	screen.button_count = i32.add(screen.button_count, 1)						// FIXME -> button_count to len(slice)
}

/* Function     : updateButtonsState
   Input        : the cursors x-position (cursor_x i32)
                : the cursors y-position (cursor_y i32)
                : the screen with the buttons (screen Screen)
   Output       : the screen with the updated buttons (screen Screen)
   Description  : checks all buttons in the screen, if the cursor is inside on of them 
				: and updates this buttons properties to active = true / the other ones active = false
*/
func updateButtonsState(cursor_x i32, cursor_y i32, screen Screen) (screen Screen) {
	for i:=0; i<screen.button_count; i++ {									// FIXME -> button_count to len(slice)
		screen.buttons[i].active = positionInsideButton(cursor_x, cursor_y, screen.buttons[i], screen)			//TODO -> inside switchHandler? not direct variable setting
	}
}  

/* Function     : getActiveButton
   Input        : the screen with the buttons (screen Screen)
   Output       : the name of the button that is acitve (button_name str)
   Description  : Constructor for the Button struct.
*/
func getActiveButton(screen Screen) (button_name str) {
	button_name = "NONE" 													// FIXME add bool to return params
	for i:=0; i<screen.button_count; i++ {									// FIXME -> button_count to len(slice)
	  if screen.buttons[i].active {
		button_name = screen.buttons[i].name
	  }
	}
}

/* Function     : positionInsideButton
   Input        : the cursors x-position (x i32)
                : the cursors y-position (y i32)
                : the button that should be checked (button buttonHandler.Button)
                : the screen that contains the button (screen Screen)
   Output       : boolean if cursor is inside or not (inside bool)
   Description  : checks if the position x and y are inside the given button on the given screen
*/
func positionInsideButton(x i32, y i32, button buttonHandler.Button, screen Screen) (inside bool) {
	inside = false
	if i32.gteq(x, i32.sub(relative2absoluteX(button.x, screen.width), i32.div(button.width, 2))) {
	  if i32.lteq(x, i32.add(relative2absoluteX(button.x, screen.width), i32.div(button.width, 2))) {
		if i32.gteq(y, i32.sub(relative2absoluteY(button.y, screen.height), i32.div(button.height, 2))) {
			if i32.lteq(y, i32.add(relative2absoluteY(button.y, screen.height), i32.div(button.height, 2))) {
				inside = true  // FIXME I won't allow this shit tier code...
			}
		}
	  }
	}
}

/*************************************
 * Textbox-Functions
**************************************/

/* Function     : addTextboxToScreen
   Input        : The textbox to add (textbox textboxHandler.Textbox)
                : The screen where to add the textbox (screen Screen)
   Output       : The screen with the added textbox (screen Screen)
   Description  : Adds a textbox to the given screen
*/
func addTextboxToScreen(textbox textboxHandler.Textbox, screen Screen) (screen Screen) {
	//screen.textboxes = append(screen.textboxes, i32.add(screen.textbox_count , 1)) //FIXME -> use slices when work //len(slice)
	screen.textboxes[screen.textbox_count] = textbox								 //FIXME -> len(slice)
	screen.textbox_count = i32.add(screen.textbox_count, 1)							 //FIXME -> len(slice)
}

/* Function     : updateTextboxText
   Input        : the identifier of the textbox (textbox_id str)
                : the new text to add (text str)
   Description  : updates the text of a given textbox
*/
func updateTextboxText(textbox_id str, text str)(){
	current_screen = textboxHandler.setTextboxText(textbox_id, text, current_screen)
}

/* Function     : updateTextboxes
   Description  : A routine to update all the textboxes, depending on what screen is the current_screen
*/
func updateTextboxes()(){
	if str.eq(current_screen.name,SCREEN_SETTINGS){
		updateTextboxText("TESTSLIDER",i32.str(current_screen.sliders[0].value)) //TODO iterate through textboxes until id is found and give then value on this, not by direct accessing .value
		updateTextboxText("TESTSLIDER2",i32.str(current_screen.sliders[1].value))
	}
}

/*************************************
 * Switch-Functions
**************************************/

/* Function     : addSwitchToScreen
   Input        : The switch to add (switchy switchHandler.Switch)
                : The screen where to add the switch (screen Screen)
   Output       : The screen with the added switch (screen Screen)
   Description  : Adds a textbox to the given screen
*/
func addSwitchToScreen(switchy switchHandler.Switch, screen Screen) (screen Screen) {
	//screen.buttons = append(screen.buttons, i32.add(screen.button_count , 1)) //FIXME -> use slices when work
	screen.switches[screen.switches_count] = switchy							//FIXME -> switches_count to len(slice)
	screen.switches_count = i32.add(screen.switches_count, 1)					//FIXME -> switches_count to len(slice)
}

/* Function     : updateSwitchState
   Input        : the x-position of the mousecursor (cursor_x i32)
				: the y-position of the mousecursor (cursor_y i32)
                : the screen where to check the switches (screen Screen)
   Description  : updates the switch, where the mouse is on the actual screen
*/
func updateSwitchState(cursor_x i32, cursor_y i32, screen Screen) (screen Screen) {
	for i:=0; i<screen.switches_count; i++ {
		screen.switches[i].active = positionInsideSwitch(cursor_x, cursor_y, screen.switches[i], screen)
	}
} 

/* Function     : getActiveSwitch
   Input        : the screen where to check (screen Screen)
   Output   	: the identifier for the switch (switch_id str)
   Description  : returns the switch, that is active on the screen
*/
func getActiveSwitch(screen Screen) (switch_id str) {
	switch_id = "NONE" 															// FIXME add bool to return params
	for i:=0; i<screen.switches_count; i++ {
	  if screen.switches[i].active {
		switch_id = screen.switches[i].id
	  }
	}
}

/* Function     : toggleActiveSwitch
   Input        : the identifier for the switch to toggle (switch_id str)
   Description  : toggles the given Switch
*/
func toggleSwitch(switch_id str)(){
	for i:=0; i<current_screen.switches_count; i++ {
		if str.eq(current_screen.switches[i].id, switch_id) {
			current_screen.switches[i] = switchHandler.toggle(current_screen.switches[i])
		}
	}
}

/* Function     : positionInsideSwitch
   Input        : the cursors x-position (x i32)
                : the cursors y-position (y i32)
                : the switch that should be checked (switchy switchHandler.Switch)
                : the screen that contains the switch (screen Screen)
   Output       : boolean if cursor is inside or not (inside bool)
   Description  : returns if the cursor is in the given switch
*/
func positionInsideSwitch(x i32, y i32, switchy switchHandler.Switch, screen Screen) (inside bool) {
	inside = false
	if i32.gteq(x, i32.sub(relative2absoluteX(switchy.x, screen.width), i32.div(switchy.width, 2))) {
	  if i32.lteq(x, i32.add(relative2absoluteX(switchy.x, screen.width), i32.div(switchy.width, 2))) {
			if i32.gteq(y, i32.sub(relative2absoluteY(switchy.y, screen.height), i32.div(switchy.height, 2))) {
				if i32.lteq(y, i32.add(relative2absoluteY(switchy.y, screen.height), i32.div(switchy.height, 2))) {
					inside = true  // FIXME I won't allow this shit tier code...
				}
			}
	  }
	}
}


/*************************************
 * Slider-Functions
**************************************/

/* Function     : addSliderToScreen
   Input        : The Slider to add (slider sliderHandler.Slider)
                : The screen where to add the Slider (screen Screen)
   Output       : The screen with the added Slider (screen Screen)
   Description  : Adds a textbox to the given screen
*/
func addSliderToScreen(slider sliderHandler.Slider, screen Screen) (screen Screen) {
	//screen.buttons = append(screen.buttons, i32.add(screen.button_count , 1)) //FIXME -> use slices when work
	screen.sliders[screen.sliders_count] = slider								//FIXME -> sliders_count to len(slice)
	screen.sliders_count = i32.add(screen.sliders_count, 1)						//FIXME -> sliders_count to len(slice)
}

/* Function     : updateSliderState
   Input        : the x-position of the mousecursor (cursor_x i32)
				: the y-position of the mousecursor (cursor_y i32)
                : the screen where to check the sliders (screen Screen)
   Description  : updates the Sliders State, when the mouse is above the slider it gets activated, if the mouse is clicked above then clicked = true
*/
func updateSliderState(cursor_x i32, cursor_y i32, screen Screen) (screen Screen) {
	for i:=0; i<screen.sliders_count; i++ {										//FIXME -> sliders_count to len(slice)
		screen.sliders[i].active = positionInsideSlider(cursor_x, cursor_y, screen.sliders[i], screen)
		if bool.eq(screen.sliders[i].active, true){
			if bool.eq(inputHandler.mouse_left_click, true){
				screen.sliders[i].clicked = true
			}
		}
		if bool.eq(inputHandler.mouse_left_release, true){
			screen.sliders[i].clicked = false
		}
	}
}


/* Function     : updateSliderPosition
   Input        : the identifier for the slider (slider_id str)
				: the xposition of the mouse (mouse_x f64)
   Description  : updates the sliders position on the same position of the mouse
*/
func updateSliderPosition(slider sliderHandler.Slider, mouse_x f64){
	for i:=0; i<current_screen.sliders_count; i++ {								//FIXME -> sliders_count to len(slice)
		if str.eq(current_screen.sliders[i].id, slider.id){
			current_screen.sliders[i].slider_x = absolute2relativeX(f64.i32(mouse_x), current_screen.width)
			current_screen.sliders[i] = sliderHandler.limitPosition(current_screen.sliders[i])
			current_screen.sliders[i]= sliderHandler.setValueByPosition(current_screen.sliders[i])
		}
	}
}

/* Function     : getActiveSlider
   Input        : the screen where to check (screen Screen)
   Output   	: the identifier for the Slider (slider_id str)
   Description  : returns the Slider, that is active on the screen
*/
func getActiveSlider(screen Screen) (slider_id str) {
	slider_id = "NONE" 															//FIXME add bool to return params
	for i:=0; i<screen.sliders_count; i++ {										//FIXME -> sliders_count to len(slice)
	  if screen.sliders[i].active {
		slider_id = screen.sliders[i].id
	  }
	}
}

/* Function     : positionInsideSlider
   Input        : the cursors x-position (x i32)
                : the cursors y-position (y i32)
                : the slider that should be checked (slider sliderHandler.Slider)
                : the screen that contains the slider (screen Screen)
   Output       : boolean if cursor is inside or not (inside bool)
   Description  : returns if the cursor is in the given slider
*/
func positionInsideSlider(x i32, y i32, slider sliderHandler.Slider, screen Screen) (inside bool) {
	inside = false
	if i32.gteq(x, i32.sub(relative2absoluteX(slider.slider_x, screen.width), i32.div(slider.slider_width, 2))) {
	  if i32.lteq(x, i32.add(relative2absoluteX(slider.slider_x, screen.width), i32.div(slider.slider_width, 2))) {
			if i32.gteq(y, i32.sub(relative2absoluteY(slider.slider_y, screen.height), i32.div(slider.slider_height, 2))) {
				if i32.lteq(y, i32.add(relative2absoluteY(slider.slider_y, screen.height), i32.div(slider.slider_height, 2))) {
					inside = true  // FIXME I won't allow this shit tier code...
				}
			}
	  }
	}
}

/*************************************
 * Declaration of rendering functions.
**************************************/

/* Function     : renderScreen
   Input        : the screen to render (screen Screen)
   Description  : renders the screen and all it's objects
*/
func renderScreen(screen Screen) () {
	if screen.has_background {
	  gl.LoadIdentity()
	  gl.BindTexture(gl.TEXTURE_2D, screen.background)
	  gl.Scalef(1.0, 1.0, 0.0)
	  gl.Begin(gl.QUADS)
	  gl.TexCoord2d(0.0D, 0.0D)
	  gl.Vertex3f(-1.0, 1.0, 0.0)
	  gl.TexCoord2d(1.0D, 0.0D)
	  gl.Vertex3f(1.0, 1.0, 0.0)
	  gl.TexCoord2d(1.0D, 1.0D)
	  gl.Vertex3f(1.0, -1.0, 0.0)
	  gl.TexCoord2d(0.0D, 1.0D)
	  gl.Vertex3f(-1.0, -1.0, 0.0)
	  gl.End()
	}

	for i:= 0; i < screen.button_count; i++ {								// FIXME -> button_count to len(slice)
		buttonHandler.renderButton(screen.buttons[i], screen)			
	}

	for i:=0; i<screen.textbox_count; i++ {									// FIXME -> textbox_count to len(slice)
		textboxHandler.renderTextbox(screen.textboxes[i], screen)
	}

	for i:= 0; i < screen.switches_count; i++ {								// FIXME -> switches_count to len(slice)
		switchHandler.renderSwitch(screen.switches[i], screen)
	}

	for i:= 0; i < screen.sliders_count; i++ {								// FIXME -> sliders_count to len(slice)
		sliderHandler.renderSlider(screen.sliders[i], screen)
	}
}

/***************************************
 * Scale-Functions
***************************************/ 

func scale(value i32, max i32) (scaled f32) {
  scaled = f32.div(i32.f32(value), i32.f32(max))
}

func relative2absoluteX(relative_position f32, max_px i32) (absolute_position i32) {
  absolute_position = f32.i32(f32.add(f32.div(i32.f32(max_px), 2.0), f32.mul(relative_position, f32.div(i32.f32(max_px), 2.0))))
}

func relative2absoluteY(relative_position f32, max_px i32) (absolute_position i32) {
	absolute_position = f32.i32(f32.sub(f32.div(i32.f32(max_px), 2.0), f32.mul(relative_position, f32.div(i32.f32(max_px), 2.0))))
}

func absolute2relativeX(absolute_position i32, max_px i32)(relative_position f32){
	relative_position = f32.sub(f32.mul(2.0, f32.div(i32.f32(absolute_position), i32.f32(max_px))),1.0)
}
/***************************************
 * Main
***************************************/

/* Function     : main
   Description  : 1. updates all buttons of the current_screen
				: 2. updates all switches of the current_screen
				: 3. updates all sliders of the current_screen
				: 4. updates the textboxes (for showing variables etc.)
				: 5. renders current_screen
*/
func main(){
	current_screen = updateButtonsState(f64.i32(inputHandler.mouse_x), f64.i32(inputHandler.mouse_y), current_screen)
	current_screen = updateSwitchState(f64.i32(inputHandler.mouse_x), f64.i32(inputHandler.mouse_y), current_screen)
	current_screen = updateSliderState(f64.i32(inputHandler.mouse_x), f64.i32(inputHandler.mouse_y), current_screen)
	updateTextboxes()
	renderScreen(current_screen)
}